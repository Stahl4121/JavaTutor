//
//  DomainRepo.swift
//  JavaTutor
//
//  Created by Logan Stahl on 3/18/19.
//  Copyright Â© 2019 Logan Stahl. All rights reserved.
//

import Foundation

class DomainRepo: NSObject {
    
    var moduleNames: [String]
    var lessonNames: [[String]]
    var finishedLessons: [String]
    var questions: [[Question]]
    var fileUrl: URL?
    
    static let instance = DomainRepo()

    private override init() {
        moduleNames = [String]()
        lessonNames = [[String]]()
        questions = [[Question]]()
        finishedLessons = [String]()

        super.init()
        
        loadSectionNames()
        loadQuestions()
    }

    /**
     * Populates the moduleNames and lessonNames array from
     * the names.json file.
     */
    func loadSectionNames(){
        let path = Bundle.main.path(forResource: "names", ofType: "json")
        if let filePath = path {
            fileUrl = URL(fileURLWithPath: filePath)
        }
        else {
            fileUrl = nil
        }
        
        do {
            if let url = fileUrl {
                // Grab JSON contents
                let contents = try Data(contentsOf: url)
                let names = try JSONSerialization.jsonObject(with: contents, options: .mutableContainers) as! [[String: Any]]
                
                //Initialize arrays to a size equal to the number of modules
                for _ in 1...names.count {
                    moduleNames.append("")
                    lessonNames.append([""])
        //            finishedLessons.append([0])
                }
                
                for nameSet in names {
                    moduleNames.insert(nameSet["name"] as! String, at: ((nameSet["module"] as! Int) - 1))
                    lessonNames.insert(nameSet["lessonNames"] as! [String], at: ((nameSet["module"] as! Int) - 1))
        //            finishedLessons.insert([0], at: ((nameSet["module"] as! Int) - 1))
                }
                moduleNames.removeAll(where: {$0==""})
                lessonNames.removeAll(where: {$0==[""]})
        //        finishedLessons.removeAll(where: {$0==[0]})
            }
            else {
                print("Bad file path to names.json")
            }
        } catch {
            print("Error getting file info for names.json")
        }
    }
    
    
    /**
     * Populates the questions array from
     * the questions.json file and the autogenerated
     * question scripts.
     */
    func loadQuestions(){
        var allQuestions = [Question]()
        
        let path = Bundle.main.path(forResource: "questions", ofType: "json")
        if let filePath = path {
            fileUrl = URL(fileURLWithPath: filePath)
        }
        else {
            fileUrl = nil
        }
        
        do {
            if let url = fileUrl {
                // Grab JSON contents
                let contents = try Data(contentsOf: url)
                var questionArray = try JSONSerialization.jsonObject(with: contents, options: .mutableContainers) as! [[String: Any]]
                
                // Add in generated questions
                let qGen = QGen()
                
                for _ in 1...10 {
                    let data = qGen.getQuestion(module: 2).data(using: .utf8)!
                    questionArray.append(try JSONSerialization.jsonObject(with: data, options: .mutableContainers) as! [String: Any])
                }

                // Append each question to the array
                for question in questionArray {
                    let temp = Question()
                    
                    for (key, value) in question {
                        if Question.fields.contains(key) {
                            temp.setValue(value, forKey: key)
                        }
                    }
                    
                    temp.shuffleAnswers()
                    allQuestions.append(temp)
                }
                
                // Sort by the specified order
                for i in 1...(moduleNames.count){
                    questions.append(allQuestions.filter({$0.module == i}).shuffled())
                }
                
                //Add Template Questions to quizzes that haven't been fully implemented in code
                for i in 0...(moduleNames.count-1){
                    if questions[i].isEmpty{
                        questions[i].append(Question(module: i+1, question: "What is the answer to this question?", answers: ["The Correct Answer", "An Incorrect Answer", "Another Incorrect Answer", "Yet Another Incorrect Answer"], correctIdx: 0, bloomValue: 1))
                    }
                }
                
            }
            else {
                print("Bad file path for questions.json")
            }
        } catch {
            print("Error getting file info for names.json")
        }
    }//end loadQuestions()
    

}
